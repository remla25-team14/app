name: Release

on:
  push:
    tags: ['v*']

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/app
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.meta.outputs.version }}

  update-version:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (stable)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine next prerelease version
        id: next_prerelease
        run: |
          version=${GITHUB_REF#refs/tags/v}
          base_version=$(echo "$version" | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')
          
          latest_prerelease_tag=$(git tag --list "v${base_version}-rc.*" | sort -V | tail -n 1)
          
          rc_number=1
          if [[ -n "$latest_prerelease_tag" ]]; then
            latest_rc_number=$(echo "$latest_prerelease_tag" | grep -oP 'rc\.\K\d+')
            rc_number=$((latest_rc_number + 1))
          fi
          
          # Construct the new prerelease version string (e.g., v0.1.5-rc.3)
          next="v${base_version}-rc.${rc_number}"
          echo "next_release=$next" >> $GITHUB_OUTPUT

      - name: Bump version in metadata
        run: |
          # Write the new prerelease version to a VERSION file
          echo "${{ steps.next_prerelease.outputs.next_release }}" > VERSION

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add VERSION
          
          git commit -m "chore: bump to prerelease ${{ steps.next_prerelease.outputs.next_release }}"
          
          git tag ${{ steps.next_prerelease.outputs.next_release }}
          
          git push origin HEAD:main --follow-tags

      - name: Create prerelease GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.next_prerelease.outputs.next_release }}
          name: Pre-release ${{ steps.next_prerelease.outputs.next_release }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}